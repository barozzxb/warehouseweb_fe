import { Form, Input, InputNumber, Select, Button, Card, message } from 'antd';
import { useNavigate } from 'react-router-dom';
import React, { useState, useEffect } from 'react';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable'; // For table formatting in PDF
import moment from 'moment';

const { Option } = Select;

function ExportProduct() {
  const navigate = useNavigate();
  const [form] = Form.useForm();
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  // Fetch products from API
  const fetchProducts = async () => {
    try {
      const response = await fetch(
        'http://localhost:8020/api/v1/products?page=1&size=100&sort=name&direction=asc',
        { headers: { 'Accept': '*/*' } }
      );
      const result = await response.json();
      if (result.status === 200) {
        setProducts(result.data.content);
      }
    } catch (error) {
      console.error('Error fetching products:', error);
      message.error('Failed to load products');
    }
  };

  // Initial fetch
  useEffect(() => {
    fetchProducts();
  }, []);

  // Handle form submission and generate PDF
  const onFinish = async (values) => {
    setLoading(true);
    try {
      // Find selected product
      const selectedProduct = products.find((p) => p.id === values.productId);
      if (!selectedProduct) {
        message.error('Selected product not found');
        setLoading(false);
        return;
      }

      // Generate PDF
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      const margin = 10;
      const maxWidth = pageWidth - 2 * margin;

      // Header
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text('Product Export Document', pageWidth / 2, 20, { align: 'center' });

      // Date and Time
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Date: ${moment().format('YYYY-MM-DD HH:mm:ss')}`, margin, 30);

      // Product Details Table
      autoTable(doc, {
        startY: 40,
        head: [['Field', 'Value']],
        body: [
          ['Product Name', selectedProduct.name],
          ['SKU', `SKU${selectedProduct.id.toString().padStart(3, '0')}`],
          ['Category', getCategoryName(selectedProduct.categoryId)],
          ['Quantity to Export', values.quantity],
          ['Destination', values.destination],
          ['Reason', values.reason.charAt(0).toUpperCase() + values.reason.slice(1)],
          ['Notes', values.notes || 'N/A'],
          ['Unit Price', `$${selectedProduct.unitPrice}`],
          ['Total Value', `$${selectedProduct.unitPrice * values.quantity}`],
        ],
        styles: { fontSize: 10, cellPadding: 4 },
        headStyles: { fillColor: [22, 160, 133], textColor: [255, 255, 255] },
        alternateRowStyles: { fillColor: [240, 240, 240] },
        margin: { left: margin, right: margin },
        columnStyles: {
          0: { cellWidth: 50 },
          1: { cellWidth: maxWidth - 50 },
        },
      });

      // Footer
      const finalY = doc.lastAutoTable.finalY + 20;
      doc.setFontSize(10);
      doc.setFont('helvetica', 'italic');
      doc.text('Generated by Inventory Management System', pageWidth / 2, finalY, {
        align: 'center',
      });

      // Save PDF
      doc.save(`Export_${selectedProduct.name}_${moment().format('YYYYMMDD_HHmmss')}.pdf`);

      message.success('Product export PDF generated successfully!');
      navigate('/');
    } catch (error) {
      console.error('Error generating export PDF:', error);
      message.error('Failed to generate export PDF');
    } finally {
      setLoading(false);
    }
  };

  // Map categoryId to category name (mocked, replace with actual mapping)
  const getCategoryName = (categoryId) => {
    const categoryMap = {
      2: 'Electronics',
      6: 'Clothing',
      7: 'Clothing',
      8: 'Furniture',
      12: 'Automotive',
      13: 'Stationery',
      14: 'Food',
      18: 'Medical',
      11: 'Tools',
    };
    return categoryMap[categoryId] || 'Unknown';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 p-6">
      <div className="max-w-2xl mx-auto">
        <Card
          title="Export Product"
          className="border-0 shadow-lg rounded-xl bg-white/80 backdrop-blur-sm"
        >
          <Form
            form={form}
            layout="vertical"
            onFinish={onFinish}
            className="space-y-4"
          >
            <Form.Item
              name="productId"
              label="Product"
              rules={[{ required: true, message: 'Please select a product!' }]}
            >
              <Select placeholder="Select product" loading={!products.length}>
                {products.map((product) => (
                  <Option key={product.id} value={product.id}>
                    {product.name}
                  </Option>
                ))}
              </Select>
            </Form.Item>

            <Form.Item
              name="quantity"
              label="Quantity"
              rules={[
                { required: true, message: 'Please input quantity!' },
                {
                  validator: (_, value) => {
                    const selectedProduct = products.find(
                      (p) => p.id === form.getFieldValue('productId')
                    );
                    if (selectedProduct && value > selectedProduct.quantity) {
                      return Promise.reject(
                        `Quantity cannot exceed available stock (${selectedProduct.quantity})!`
                      );
                    }
                    return Promise.resolve();
                  },
                },
              ]}
            >
              <InputNumber min={1} className="w-full" />
            </Form.Item>

            <Form.Item
              name="destination"
              label="Destination"
              rules={[{ required: true, message: 'Please input destination!' }]}
            >
              <Input placeholder="Enter destination" />
            </Form.Item>

            <Form.Item
              name="reason"
              label="Export Reason"
              rules={[{ required: true, message: 'Please select a reason!' }]}
            >
              <Select placeholder="Select reason">
                <Option value="sale">Sale</Option>
                <Option value="transfer">Transfer</Option>
                <Option value="return">Return</Option>
                <Option value="other">Other</Option>
              </Select>
            </Form.Item>

            <Form.Item name="notes" label="Notes">
              <Input.TextArea rows={4} placeholder="Enter any additional notes" />
            </Form.Item>

            <Form.Item className="mb-0">
              <div className="flex justify-end space-x-4">
                <Button onClick={() => navigate('/')} disabled={loading}>
                  Cancel
                </Button>
                <Button
                  type="primary"
                  htmlType="submit"
                  loading={loading}
                  className="bg-gradient-to-r from-blue-500 to-purple-600 border-0 hover:from-blue-600 hover:to-purple-700"
                >
                  Export Product
                </Button>
              </div>
            </Form.Item>
          </Form>
        </Card>
      </div>
    </div>
  );
}

export default ExportProduct;